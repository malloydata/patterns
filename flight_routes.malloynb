>>>markdown
# Flight Routes Analysis
Below is the semantic model for the queries used in this notebook.  The 'flights' source joins in an airports table (twice, once as orign and once as destination) and a carriers table. 
>>>malloy
source: flights is table('duckdb:data/flights.parquet') {
  measure: 
    flight_count is count()
    # percent
    percent_of_flights is flight_count/all(flight_count)

  join_one: orig is table('duckdb:data/airports.parquet') on origin=orig.code
  join_one: dest is table('duckdb:data/airports.parquet') on destination=dest.code
  join_one: carriers is table('duckdb:data/carriers.parquet') on carrier=carriers.code

  query: routes is {
    group_by:
      orig.latitude
      orig.longitude
      latitude2 is dest.latitude
      longitude2 is dest.longitude
  }
}
>>>markdown
## Flight Routes By Carrier
Look at the top 10 destinations.  Show which carriers fly there and where the flights oroginate from.  
>>>malloy
# dashboard
run: flights -> {
  top: 10
  group_by: dest.code, dest.full_name
  aggregate: flight_count
  # bar_chart
  nest: by_carrier is {
    group_by: carriers.nickname
    aggregate: flight_count
  }
  # line_chart
  nest: by_carrier_by_month is {
    group_by: flight_month is dep_time.month
    aggregate: flight_count
    group_by: carriers.nickname
  }
  nest: by_carrier_origin is {
    group_by: carriers.nickname
    aggregate: 
      flight_count
      percent_of_flights
      avg_distance is distance.avg()
    # segment_map
    nest: routes
    # list_detail
    nest: origin_percentage is {
      group_by: orig.city
      aggregate: percent_of_flights
    }
  }
}
>>>markdown
# Plane Tracker

Starting from a basic flight log and a list of airports, produce a table that show flights log of individual planes.

We'll look at the first 5 days of flights in the year 2002 for all the airplanes flown by Southwest.

See each plane (by tail_num) and the days in sequence.
>>>malloy
run: flights -> {
  where: carriers.nickname = 'Southwest' and dep_time ? @2002-01 for 5 days
  group_by: tail_num
  nest: by_date is {
    group_by: flight_date is dep_time.day
    aggregate: flight_count
    # segment_map
    nest: routes
    nest: flights is {
      calculate: flight is row_number()
      group_by: 
        dep_time
        origin
        destination
      order_by: dep_time
    }
    order_by: flight_date
  }
  limit: 5
}