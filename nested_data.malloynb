[
  {
    "kind": 1,
    "language": "markdown",
    "value": "# Working with Nested Data\nData often comes in a nested structure, where information is organized hierarchically. BigQuery and DuckDB have built-in support for reading tables with nested data and extracting information from these nested structures.\n\nWhen working with nested data in Malloy, it becomes remarkably simple. In Malloy, a nested array or struct is treated as a built-in join_many operation. You can effortlessly access the desired data using dot notation.\n\nFor example, in this dataset, there are repeated structures such as hits, pageviews, and product. To perform aggregate calculations, you can specify the complete path to the numeric value and select the appropriate aggregate function. Malloy refers to this as aggregate locality, ensuring accurate calculations regardless of the join pattern used.\n\nMalloy simplifies working with nested data by treating it as a natural part of the data model. It provides convenient access to nested structures using dot notation and ensures reliable aggregate calculations regardless of the join pattern employed.",
    "metadata": {}
  },
  {
    "kind": 2,
    "language": "malloy",
    "value": "source:ga_sessions is table('duckdb:data/ga_sample.parquet'){\n  measure:\n    user_count is count(distinct fullVisitorId)\n    session_count is count()\n    total_visits is totals.visits.sum()\n    total_hits is totals.hits.sum()\n    total_page_views is totals.pageviews.sum()\n    t2 is totals.pageviews.sum()\n    total_productRevenue is hits.product.productRevenue.sum()\n    hits_count is hits.count()\n    sold_count is hits.count() { where: hits.product.productQuantity > 0 }\n}",
    "metadata": {}
  },
  {
    "kind": 2,
    "language": "malloy",
    "value": " query: ga_sessions -> {\n    where: trafficSource.source != '(direct)'\n    group_by: trafficSource.source\n    aggregate: \n      hits_count\n      total_visits\n      session_count\n      user_count\n    limit: 10\n  }",
    "metadata": {}
  },
  {
    "kind": 2,
    "language": "malloy",
    "value": "  query: ga_sessions -> {\n    group_by: device.browser\n    aggregate: \n      user_count\n      total_visits\n      total_hits\n      total_page_views\n      sold_count\n  }",
    "metadata": {}
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "## Nested Data can also be from JSON\nDuckdb natively reads JSON and JSON often contains nested element.  \ncan easily transform on JSON structure into another.\n\nStarting with this *[example json file](data/commits.json)*, we can write a query \nto transform it.",
    "metadata": {}
  },
  {
    "kind": 2,
    "language": "malloy",
    "value": "",
    "metadata": {}
  },
  {
    "kind": 2,
    "language": "malloy",
    "value": "query: table('duckdb:data/commits.json') -> {\n  group_by: author.login\n  aggregate: commit_count is count()\n  nest: by_commit is {\n    group_by: \n      commit.committer.`date`\n      commit.message\n      html_url\n  }\n}",
    "metadata": {}
  }
]