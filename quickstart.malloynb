[{"kind":1,"language":"markdown","value":"# Malloy Quickstart\n\nThis guide introduces the basics of querying and modeling with Malloy.  You can run and or modify all queries in this notbeook.  Everything is running in your browser.\n\n\n\n## Leading with the Source\n\nQueries are of the form: _source_ `->` _operation_\n\nIn Malloy, the source of a query is either a raw table, a [modeled source](source.md), or another query.\n\nIn this example, the `table()` function provides the query _source_ from a table (or view) in the database.\nThe query _operation_ is explicit about which fields are grouped, aggregated or projected.\n"},{"kind":2,"language":"malloy","value":"sql: foo is {\n  select: \"\"\"\n    select 1\n  \"\"\"\n  connection: \"duckdb\"\n}\nquery: from_sql(foo)->{project: *}"},{"kind":2,"language":"malloy","value":"query: table('duckdb:data/airports.parquet') -> {\n  group_by: state\n  aggregate: airport_count is count()\n  limit: 10\n}"},{"kind":1,"language":"markdown","value":"\n## Query Operators\n\nIn SQL, the <code>SELECT</code> command does two very different things.  A <code>SELECT</code> with a <code>GROUP BY</code> aggregates data according to the <code>GROUP BY</code> clause and produces aggregate calculation against every calculation not in the <code>GROUP BY</code>.  In Malloy, the query operator for this is `group_by:`.  Calculation about data in the group are made using `aggregate:`.\n\nThe second type of <code>SELECT</code> in SQL does not perform any aggregation;  All rows in the input table, unless filtered in some way, show up in the output table. In Malloy, this command is called `project:`.\n\nIn the query below, the data will be grouped by `state` and will produce an aggregate calculation for `airport_count` and `average_elevation`.  `group_by:`. The `aggregate:` list can contain references to existing aggregate fields or add new aggregate computations.\n"},{"kind":2,"language":"malloy","value":"query: table('duckdb:data/airports.parquet') -> {\n  group_by:\n    state\n    county\n  aggregate:\n    airport_count is count()\n    average_elevation is avg(elevation)\n  limit: 10\n}\n"},{"kind":1,"language":"markdown","value":"\n### Multiple Field Operations\n\nMultiple `group_by:` and `aggregate:` statements can appear in the same query operation.  This can be helpful in rendering when the order of fields in the query output is significant."},{"kind":2,"language":"malloy","value":"query: table('duckdb:data/airports.parquet') -> {\n  group_by: fac_type\n  aggregate: airport_count is count()\n  group_by: county\n  aggregate: max_elevation is max(elevation)\n  limit: 10\n}"},{"kind":1,"language":"markdown","value":"### Project\n`project` produces a list of fields.  For every row in the input table, there is a row in the output table.\n"},{"kind":2,"language":"malloy","value":"query: table('duckdb:data/airports.parquet') -> {\n  project: code, full_name, city, county\n  where: county = 'SANTA CRUZ'\n}"},{"kind":1,"language":"markdown","value":"\n## Everything has a Name\n\nIn Malloy, all output fields have names. This means that any time a query\nintroduces a new aggregate computation, it must be named. _(unlike SQL,\nwhich allows un-named expressions)_\n\n"},{"kind":2,"language":"malloy","value":"query: table('duckdb:data/airports.parquet') -> {\n  aggregate: max_elevation is max(elevation)\n}"},{"kind":1,"language":"markdown","value":"\nNotice that Malloy uses the form \"_name_ `is` _value_\" instead of SQL's \"_value_ `as` _name_\".\nHaving the output column name written first makes it easier for someone reading\nthe code to visualize the resulting query structure.\n\nNamed objects, like columns from a table, and fields defined in a source, can be included in field lists without an `is`\n\n"},{"kind":2,"language":"malloy","value":"query: table('duckdb:data/airports.parquet') -> {\n  project:\n    full_name\n    elevation\n  limit: 10\n}"},{"kind":1,"language":"markdown","value":"\n## Expressions\n\nMany SQL expressions will work unchanged in Malloy, and many functions available in Standard SQL are usable in Malloy as well. This makes expressions fairly straightforward to understand, given a knowledge of SQL.\n\n"},{"kind":2,"language":"malloy","value":"query: table('duckdb:data/airports.parquet') -> {\n  group_by: county_and_state is concat(county, ', ', state)\n  aggregate:\n    airport_count is count()\n    max_elevation is max(elevation)\n    min_elevation is min(elevation)\n    avg_elevation is avg(elevation)\n  limit: 10\n}\n"},{"kind":1,"language":"markdown","value":"The basic types of Malloy expressions are `string`, `number`, `boolean`, `date`, and `timestamp`.\n\n## Modeling and Reuse\n\nOne of the main benefits of Malloy is the ability to save common calculations into a data model.  In the example below, we create a *source* object named `airports` and add a `dimension:` calculation for `county_and_state` and `measure:` calculation for `airport_count`.  Dimensions can be used in `group_by:`, `project:` and `where:`.  Measures can be used in `aggregate ?` and `having ?`.\n\n"},{"kind":2,"language":"malloy","value":"source: airports is table('duckdb:data/airports.parquet') {\n  dimension: county_and_state is concat(county, ', ', state)\n  measure: airport_count is count()\n  measure: average_elevation is avg(elevation)\n}\n\nquery: airports -> {\n  group_by: county_and_state\n  aggregate: airport_count\n  limit: 10\n}"},{"kind":1,"language":"markdown","value":"\n## Ordering and Limiting\n\nIn Malloy, ordering and limiting work pretty much the same way they do in SQL, though Malloy introduces some [reasonable defaults](order_by.md).\n\nThe `top:` and `limit:` statements are synonyms and limits the number of rows returned. Results below are sorted by the first measure descending--in this case, `airport_count`.\n"},{"kind":2,"language":"malloy","value":"query: table('duckdb:data/airports.parquet') -> {\n  top: 2\n  group_by: state\n  aggregate: airport_count is count()\n}"},{"kind":1,"language":"markdown","value":"\nDefault ordering can be overridden with `order_by:`, as in the following query, which shows the states in alphabetical order.  `order_by:` can take a field index number or the name of a field.\n\n"},{"kind":2,"language":"malloy","value":"query: table('duckdb:data/airports.parquet') -> {\n  order_by: state\n  group_by: state\n  aggregate: airport_count is count()\n  limit: 10\n}"},{"kind":1,"language":"markdown","value":"\n## Filtering\n\nWhen working with data, filtering is something you do in almost every query. Malloy's filtering is more powerful and expressive than that of SQL. When querying data, we first isolate the data we are interested in (filter it) and then perform aggregations and calculations on the data we've isolated (shape it). Malloy provides consistent syntax for filtering everywhere within a query.\n\n### Filtering the Source\n\nA filter on a data source table narrows down which data is included to be passed to the query _operation_. This translates\nto a <code>WHERE</code> clause in SQL.\nIn this case, the data from the table is filtered to just airports in California.\n\n"},{"kind":2,"language":"malloy","value":"query: table('duckdb:data/airports.parquet') { where: state = 'CA' } -> {\n  top: 2\n  group_by: county\n  aggregate: airport_count is count()\n}"},{"kind":1,"language":"markdown","value":"\n### Filtering Query Stages\n\nFilters can also be applied to any query _operation_. When using a filter in this way, it only applies to\nthe data for that operation alone. (More on this later, in the section on `nest:` operations in queries.)\n\n"},{"kind":2,"language":"malloy","value":"query: table('duckdb:data/airports.parquet') -> {\n  where: state ? 'AL' | 'KY'\n  top: 5\n  group_by: state\n  aggregate:\n    airports  is count() { where: fac_type = 'AIRPORT' }\n    heliports is count() { where: fac_type = 'HELIPORT' }\n    total     is count()\n}"},{"kind":1,"language":"markdown","value":"\nA note on filtering the source vs filtering in query stages: The below queries are both valid and produce identical SQL.\n"},{"kind":2,"language":"malloy","value":"query: table('duckdb:data/airports.parquet') { where: state = 'CA' } -> {\n  top: 2\n  group_by: county\n  aggregate: airport_count is count()\n}"},{"kind":2,"language":"malloy","value":"query: table('duckdb:data/airports.parquet') -> {\n  where: state = 'CA'\n  top: 2\n  group_by: county\n  aggregate: airport_count is count()\n}"},{"kind":1,"language":"markdown","value":"\n\n### Filtering Measures\n\nA filter on an aggregate calculation (a _measure_) narrows down the data used in that specific calculation. In the example below, the calculations for `airports` and `heliports` are filtered separately.\n"},{"kind":2,"language":"malloy","value":"query: table('duckdb:data/airports.parquet') -> {\n  group_by: state\n  aggregate:\n    airports is count() { where: fac_type = 'AIRPORT' }\n    heliports is count() { where: fac_type = 'HELIPORT' }\n    total is count()\n  limit: 5\n}"},{"kind":1,"language":"markdown","value":"\n## Dates and Timestamps\n\nWorking with time in data is often needlessly complex; Malloy has built in constructs to simplify many time-related operations. This section gives a brief introduction to some of these tools, but for more details see the [Time Ranges](time-ranges.md) section.\n\n### Time Literals\n\nLiterals of type `date` and `timestamp` are notated with an `@`, e.g. `@2003-03-29` or `@1994-07-14 10:23:59`. Similarly, years (`@2021`), quarters (`@2020-Q1`), months (`@2019-03`), weeks (`@WK2021-08-01`), and minutes (`@2017-01-01 10:53`) can be expressed.\n\nTime literals can be used as values, but are more often useful in filters. For example, the following query\nshows the number of flights in 2003.\n\n"},{"kind":2,"language":"malloy","value":"query: table('duckdb:data/flights.parquet') { where: dep_time ? @2003 } -> {\n  aggregate: flight_count is count()\n}"},{"kind":1,"language":"markdown","value":"\nThere is a special time literal `now`, referring to the current timestamp, which allows for relative time filters.\n"},{"kind":2,"language":"malloy","value":"query: table('duckdb:data/flights.parquet') { where: dep_time > now - 6 hours } -> {\n  aggregate: flights_last_6_hours is count()\n}"},{"kind":1,"language":"markdown","value":"\n### Truncation\n\nTime values can be truncated to a given timeframe, which can be `second`, `minute`, `hour`, `day`, `week`, `month`, `quarter`, or `year`.\n\n"},{"kind":2,"language":"malloy","value":"query: table('duckdb:data/flights.parquet') -> {\n  group_by:\n    flight_year is dep_time.year\n    flight_month is dep_time.month\n  aggregate: flight_count is count()\n  limit: 5\n}"},{"kind":1,"language":"markdown","value":"\n### Extraction\n\nNumeric values can be extracted from time values, e.g. `day_of_year(some_date)` or `minute(some_time)`. See the full list of extraction functions [here](time-ranges.md#extraction).\n\n"},{"kind":2,"language":"malloy","value":"query: table('duckdb:data/flights.parquet') -> {\n  order_by: 1\n  group_by: day_of_week is day(dep_time)\n  aggregate: flight_count is count()\n}"},{"kind":1,"language":"markdown","value":"\n<!-- TODO it may be worth having a doc describing what the JSON+Metadata\noutput of these look like, i.e. that the JSON just includes a regular date,\nbut the metadata specifies that it's in that given timeframe.\nAnd likewise for any other data type that has interesting output metadata. -->\n\n### Time Ranges\n\nTwo kinds of time ranges are given special syntax: the range between two times and the range starting at some time for some duration. These are represented like `@2003 to @2005` and `@2004-Q1 for 6 quarters` respectively. These ranges can be used in filters just like time literals.\n\n"},{"kind":2,"language":"malloy","value":"query: table('duckdb:data/flights.parquet') { where: dep_time ? @2003 to @2005 } -> {\n  aggregate: flight_count is count()\n}"},{"kind":1,"language":"markdown","value":"\nTime literals and truncations can also behave like time ranges. Each kind of time literal has an implied duration that takes effect when it is used in a comparison, e.g. `@2003` represents the whole of the year 2003, and `@2004-Q1` lasts the whole 3 months of the quarter. Similarly, when a time value is truncated, it takes on the\ntimeframe from the truncation, e.g. `now.month` means the entirety of the current month.\n\nWhen a time range is used in a comparison, `=` checks for \"is in the range\", `>` \"is after\", and `<` \"is before.\" So `some_time > @2003` filters dates starting on January 1, 2004, while `some_time = @2003` filters to dates in the year 2003.\n\n"},{"kind":2,"language":"malloy","value":"query: table('duckdb:data/flights.parquet') { where: dep_time > @2003 } -> {\n  top: 3; order_by: departure_date asc\n  group_by: departure_date is dep_time.day\n  aggregate: flight_count is count()\n}"},{"kind":1,"language":"markdown","value":"\n## Nested Queries\n\nThe next several examples will use this simple source definition (defined above)\n"},{"kind":1,"language":"markdown","value":"```malloy\nsource: airports is table('duckdb:data/airports.parquet') {\n  dimension: county_and_state is concat(county, ', ', state)\n  measure: airport_count is count()\n  measure: average_elevation is avg(elevation)\n}\n```"},{"kind":1,"language":"markdown","value":"\n### Aggregating Subqueries\n\nIn Malloy, queries can be [nested](nesting.md) to produce subtables on each output row. Such nested queries are called _aggregating subqueries_, or simply \"nested queries.\" When a query is nested inside another query, each output row of the outer query will have a nested table for the inner query which only includes data limited to that row.\n\n"},{"kind":2,"language":"malloy","value":"query: airports -> {\n  group_by: state\n  aggregate: airport_count\n  nest: by_facility is {\n    group_by: fac_type\n    aggregate: airport_count\n  }\n  limit: 3\n}"},{"kind":1,"language":"markdown","value":"\nHere we can see that the `by_facility` column of the output table contains nested subtables on each row. When interpreting these inner tables, all of the dimensional values from outer rows still apply to each of the inner rows.\n\nQueries can be nested infinitely, allowing for rich, complex output structures. A query may always include another nested query, regardless of depth.\n\n"},{"kind":2,"language":"malloy","value":"query: airports -> {\n  group_by: state\n  aggregate: airport_count\n  nest: top_5_counties is {\n    top: 5\n    group_by: county\n    aggregate: airport_count\n    nest: by_facility is {\n      group_by: fac_type\n      aggregate: airport_count\n    }\n  }\n  limit: 3\n}"},{"kind":1,"language":"markdown","value":"\n### Filtering Nested Queries\n\nFilters can be isolated to any level of nesting. In the following example, we limit the `major_facilities` query to only airports where `major` is `'Y'`. This particular filter applies _only_ to `major_facilities`, and not to other parts of the outer query.\n\n"},{"kind":2,"language":"malloy","value":"query: airports -> {\n  where: state = 'CA'\n  group_by: county\n  aggregate: airport_count\n  nest: major_facilities is {\n    where: major = 'Y'\n    group_by: name is concat(code, ' (', full_name, ')')\n  }\n  nest: by_facility is {\n    group_by: fac_type\n    aggregate: airport_count\n  }\n  limit: 5\n}"},{"kind":1,"language":"markdown","value":"\n## Pipelines and Multi-stage Queries\n\nThe output from one stage of a query can be passed into another stage using `->`. For example, we'll start with this query which outputs, for California and New York, the total number of airports, as well as the number of airports in each county.\n"},{"kind":2,"language":"malloy","value":"query: airports -> {\n  where: state = 'CA' | 'NY'\n  group_by: state\n  aggregate: airport_count\n  nest: by_county is {\n    group_by: county\n    aggregate: airport_count\n    limit: 5\n  }\n}"},{"kind":1,"language":"markdown","value":"\nNext, we'll use the output of that query as the input to another, where we determine which counties have the highest\npercentage of airports compared to the whole state, taking advantage of the nested structure of the data to to so.\n\n"},{"kind":2,"language":"malloy","value":"query: airports -> {\n  where: state = 'CA' | 'NY'\n  group_by: state\n  aggregate: airport_count\n  nest: by_county is {\n    group_by: county\n    aggregate: airport_count\n    limit: 5\n  }\n} -> {\n  top: 10; order_by: 4 desc\n  project:\n    by_county.county\n    airports_in_county is by_county.airport_count\n    airports_in_state is airport_count\n    percent_in_county is by_county.airport_count / airport_count\n}"},{"kind":1,"language":"markdown","value":"\nNote: to pipeline a named query, the syntax to reference that named query is `-> query_name`. An example of this can be found in the [Query Doc](query.md#multi-stage-pipelines).\n\n\n## Joins\n\n[Joins](join.md) are declared as part of a source. When joining a source to another, it brings with it all child joins.\n\n"},{"kind":2,"language":"malloy","value":"\nsource: aircraft_models is table('duckdb:data/aircraft_models.parquet') \n\nsource: aircraft is table('duckdb:data/aircraft.parquet') + {\n  join_one: aircraft_models on aircraft_model_code = aircraft_models.aircraft_model_code\n}\n\nsource: flights is table('duckdb:data/flights.parquet') + {\n  join_one: aircraft on tail_num = aircraft.tail_num\n}\n"},{"kind":2,"language":"malloy","value":"query: flights -> {\n  where: dep_time ? @2003-01\n  group_by: aircraft.aircraft_models.manufacturer\n  aggregate:\n    flight_count is count()\n    aircraft_count is aircraft.count()\n    average_seats_per_model is aircraft.aircraft_models.seats.avg()\n}"},{"kind":1,"language":"markdown","value":"\nIn this example, the `aircraft` source is joined to `flights`, and aircraft_models is joined via aircraft. These examples explicitly name both keys--this same syntax can be used to write more complex joins.\n\n"},{"kind":1,"language":"markdown","value":"## Aggregate Calculations\n\nAs in SQL, aggregate functions `sum`, `count`, and `avg` are available, and their use in\nan expression identifies the corresponding field as a [measure](fields.md#measures).\n\nAggregates may be computed with respect to any joined source, allowing for a wider variety of measurements to be calculated than is possible in SQL. See the [Aggregate Locality](aggregates.md#aggregate-locality) section for more information.\n\n"},{"kind":2,"language":"malloy","value":"query: aircraft -> {\n  aggregate:\n    // The average number of seats on models of registered aircraft\n    models_avg_seats is aircraft_models.seats.avg()\n    // The average number of seats on registered aircraft\n    aircraft_avg_seats is avg(aircraft_models.seats)\n}"},{"kind":1,"language":"markdown","value":"\n## Comments\n\nMalloy code can include both line and block comments. Line comments, which begin with `--` or `//`,\nmay appear anywhere within a line, and cause all subsequent characters on that line to be ignored.\nBlock comments, which are enclosed between <code>/\\*</code> and <code>\\*/</code>, cause all enclosed characters to be ignored\nand may span multiple lines.\n"},{"kind":1,"language":"markdown","value":"\n```malloy\n-- The total number of flight entries\nquery: flights -> {\n  aggregate: flight_count // Defined simply as `count()`\n}\n\n/*\n * A comparison of the total number of flights\n * for each of the tracked carriers.\n */\nquery: flights -> {\n  group_by: carrier\n  aggregate: flight_count /* , total_distance */\n}\n```\n\n"},{"kind":1,"language":"markdown","value":"\n\n\n<!-- ## Joins are between primary and foreign keys.\n\n\n## Full graph of the data is available to query\n\n## Sums and Counts and average are a little different.\n\n## Calculations can correctly occur anywhere in the graph -->\n\n\n\n<!--\n\n## Removed things\n- Commas are optional.\n- Count can be written without the `*`.\n\n-->"}]